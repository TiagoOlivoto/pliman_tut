height = 1350:1625,
plot = TRUE)
# cropped <- image_crop(aligned, plot = TRUE)
cropped <- image_crop(aligned,
width = 1900:2933,
height = 1350:1625,
plot = TRUE)
anal <-
analyze_objects_shp(cropped,
cols = 13,
index = "HUE",
object_index = "DGCI",
plot = FALSE,
watershed = FALSE)
plot(cropped)
plot(anal$shapefiles)
plot_measures(anal, measure = "DGCI")
# cropped <- image_crop(aligned, plot = TRUE)
cropped <- image_crop(aligned,
width = 2900:3953,
height = 1350:1625,
plot = TRUE)
# cropped <- image_crop(aligned, plot = TRUE)
cropped <- image_crop(aligned,
width = 2900:3253,
height = 1350:1625,
plot = TRUE)
cropped <- image_crop(aligned, plot = TRUE)
# aligned <- image_align(shp)
x11()
cropped <- image_crop(aligned)
cropped <- image_crop(aligned, plot = TRUE)
# cropped <- image_crop(aligned, plot = TRUE)
cropped <- image_crop(aligned,
width = 3908:2361,
height = 457:696,
plot = TRUE)
anal <-
analyze_objects_shp(cropped,
cols = 26,
index = "HUE",
object_index = "DGCI",
plot = FALSE,
watershed = FALSE)
plot(anal$shapefiles)
# cropped <- image_crop(aligned, plot = TRUE)
cropped <- image_crop(aligned,
width = 3908:2358,
height = 457:696,
plot = TRUE)
# cropped <- image_crop(aligned, plot = TRUE)
cropped <- image_crop(aligned,
width = 3908:2375,
height = 457:696,
plot = TRUE)
# cropped <- image_crop(aligned, plot = TRUE)
cropped <- image_crop(aligned,
width = 3908:2375,
height = 457:696,
plot = TRUE)
anal <-
analyze_objects_shp(cropped,
cols = 26,
index = "HUE",
object_index = "DGCI",
plot = FALSE,
watershed = FALSE)
plot(anal$shapefiles)
cropped <- image_crop(aligned, plot = TRUE)
# cropped <- image_crop(aligned, plot = TRUE)
cropped <- image_crop(aligned,
width = 1900:3953,
height = 1350:1625,
plot = TRUE)
anal <-
analyze_objects_shp(cropped,
cols = 26,
index = "HUE",
object_index = "DGCI",
plot = FALSE,
watershed = FALSE)
plot(cropped)
plot(anal$shapefiles)
plot_measures(anal, measure = "DGCI")
library(pliman)
set_wd_here("imgs")
imgs <- image_import(pattern = "img", path = "fourier")
conts <-
object_contour(imgs,
index = "B",
watershed = FALSE,
show_image = FALSE)
eff <- lapply(conts, function(x){
fourier(x[[1]], nhm = 15)
})
cn <- do.call(rbind, lapply(eff, function(x){x[["cn"]]}))
dn <- do.call(rbind, lapply(eff, function(x){x[["dn"]]}))
#| code-fold: true
#| code-summary: Show functions
# Core function for elliptical Fourier analyses
# Elliptical Fourier transform (and its normalization)
# adapted from https://momx.github.io/Momocs/reference/fourier.html
fourier <- function(x, nhm = 10, ...) {
coo <- poly_check(x) |> poly_unclose()
nr <- nrow(coo)
if (nhm * 2 > nr) {
nhm <- floor(nr/2)
if (.is_verbose()) {
message("'nhm' must be lower than half the number of points, and has been set to ", nhm, "harmonics")
}
}
if (nhm == -1) {
nhm = floor(nr/2)
if (.is_verbose()) {
message("the number of harmonics used has been set to: ", nhm)
}
}
Dx <- coo[, 1] - coo[, 1][c(nr, (1:(nr - 1)))]
Dy <- coo[, 2] - coo[, 2][c(nr, (1:(nr - 1)))]
Dt <- sqrt(Dx^2 + Dy^2)
Dt[Dt < 1e-10] <- 1e-10  # to avoid Nan
t1 <- cumsum(Dt)
t1m1 <- c(0, t1[-nr])
T <- sum(Dt)
an <- bn <- cn <- dn <- numeric(nhm)
for (i in 1:nhm) {
Ti <- (T/(2 * pi^2 * i^2))
r <- 2 * i * pi
an[i] <- Ti * sum((Dx/Dt) * (cos(r * t1/T) - cos(r * t1m1/T)))
bn[i] <- Ti * sum((Dx/Dt) * (sin(r * t1/T) - sin(r * t1m1/T)))
cn[i] <- Ti * sum((Dy/Dt) * (cos(r * t1/T) - cos(r * t1m1/T)))
dn[i] <- Ti * sum((Dy/Dt) * (sin(r * t1/T) - sin(r * t1m1/T)))
}
ao <- 2 * sum(coo[, 1] * Dt/T)
co <- 2 * sum(coo[, 2] * Dt/T)
return(list(an = an, bn = bn, cn = cn, dn = dn, ao = ao,
co = co,
nr = nr,
coords = coo))
}
# Normalized coefficients
fourier_norm <- function(ef, start = FALSE) {
A1 <- ef$an[1]
B1 <- ef$bn[1]
C1 <- ef$cn[1]
D1 <- ef$dn[1]
nhm <- length(ef$an)
theta <- 0.5 * atan(2 * (A1 * B1 + C1 * D1)/(A1^2 + C1^2 -
B1^2 - D1^2))%%pi
phaseshift <- matrix(c(cos(theta), sin(theta), -sin(theta),
cos(theta)), 2, 2)
M2 <- matrix(c(A1, C1, B1, D1), 2, 2) %*% phaseshift
v <- apply(M2^2, 2, sum)
if (v[1] < v[2]) {
theta <- theta + pi/2
}
theta <- (theta + pi/2)%%pi - pi/2
Aa <- A1 * cos(theta) + B1 * sin(theta)
Cc <- C1 * cos(theta) + D1 * sin(theta)
scale <- sqrt(Aa^2 + Cc^2)
psi <- atan(Cc/Aa)%%pi
if (Aa < 0) {
psi <- psi + pi
}
size <- 1/scale
rotation <- matrix(c(cos(psi), -sin(psi), sin(psi), cos(psi)),
2, 2)
A <- B <- C <- D <- numeric(nhm)
if (start) {
theta <- 0
}
for (i in 1:nhm) {
mat <- size * rotation %*%
matrix(c(ef$an[i], ef$cn[i],
ef$bn[i], ef$dn[i]), 2, 2) %*%
matrix(c(cos(i * theta), sin(i * theta),
-sin(i * theta), cos(i * theta)), 2, 2)
A[i] <- mat[1, 1]
B[i] <- mat[1, 2]
C[i] <- mat[2, 1]
D[i] <- mat[2, 2]
lnef <- c(A[i], B[i], C[i], D[i])
}
list(A = A, B = B, C = C, D = D, size = scale, theta = theta,
psi = psi, ao = ef$ao, co = ef$co, lnef = lnef)
}
# inverse fourier
fourier_inv <- function(ef, nhm, nb.pts = 120) {
if (is.null(ef$ao))
ef$ao <- 0
if (is.null(ef$co))
ef$co <- 0
an <- ef$an
bn <- ef$bn
cn <- ef$cn
dn <- ef$dn
ao <- ef$ao
co <- ef$co
if (missing(nhm)) {
nhm <- length(an)
}
theta <- seq(0, 2 * pi, length = nb.pts + 1)[-(nb.pts + 1)]
hx <- matrix(NA, nhm, nb.pts)
hy <- matrix(NA, nhm, nb.pts)
for (i in 1:nhm) {
hx[i, ] <- an[i] * cos(i * theta) + bn[i] * sin(i * theta)
hy[i, ] <- cn[i] * cos(i * theta) + dn[i] * sin(i * theta)
}
x <- (ao/2) + apply(hx, 2, sum)
y <- (co/2) + apply(hy, 2, sum)
coo <- cbind(x, y)
colnames(coo) <- c("x", "y")
return(coo)
}
library(pliman)
imgs <- image_import(pattern = "img", path = "fourier")
conts <-
object_contour(imgs,
index = "B",
watershed = FALSE,
show_image = FALSE)
eff <- lapply(conts, function(x){
fourier(x[[1]], nhm = 15)
})
an <- do.call(rbind, lapply(eff, function(x){x[["an"]]}))
bn <- do.call(rbind, lapply(eff, function(x){x[["bn"]]}))
cn <- do.call(rbind, lapply(eff, function(x){x[["cn"]]}))
dn <- do.call(rbind, lapply(eff, function(x){x[["dn"]]}))
coefs <-
cbind(an, bn, cn, dn) |>
transform(specie = c(rep(paste0("specie", 1:3), each = 3)))
rownames(coefs) <- paste("ind", 1:9)
library(factoextra)
library(FactoMineR)
pca <- PCA(coefs, quali.sup = 61, graph = FALSE)
fviz_pca_ind(pca, habillage = 61)
image_combine(imgs)
imgs <- image_import(pattern = "img", path = "fourier")
names(imgs) <- paste0("ind", 1:9)
conts <-
object_contour(imgs,
index = "B",
watershed = FALSE,
show_image = FALSE)
eff <- lapply(conts, function(x){
fourier(x[[1]], nhm = 15)
})
an <- do.call(rbind, lapply(eff, function(x){x[["an"]]}))
bn <- do.call(rbind, lapply(eff, function(x){x[["bn"]]}))
cn <- do.call(rbind, lapply(eff, function(x){x[["cn"]]}))
dn <- do.call(rbind, lapply(eff, function(x){x[["dn"]]}))
coefs <-
cbind(an, bn, cn, dn) |>
transform(specie = c(rep(paste0("specie", 1:3), each = 3)))
rownames(coefs) <- paste("ind", 1:9)
library(factoextra)
library(FactoMineR)
pca <- PCA(coefs, quali.sup = 61, graph = FALSE)
fviz_pca_ind(pca, habillage = 61)
image_combine(imgs)
fviz_pca_ind(pca, habillage = 61)
View(eff)
View(conts)
an <- do.call(rbind, lapply(eff, function(x){x[["an"]]}))
bn <- do.call(rbind, lapply(eff, function(x){x[["bn"]]}))
cn <- do.call(rbind, lapply(eff, function(x){x[["cn"]]}))
dn <- do.call(rbind, lapply(eff, function(x){x[["dn"]]}))
coefs <-
cbind(an, bn, cn, dn) |>
transform(specie = c(rep(paste0("specie", 1:3), each = 3)))
specie
coefs
pca <- PCA(coefs, quali.sup = 61, graph = FALSE)
fviz_pca_ind(pca, habillage = 61)
conts <-
object_contour(imgs,
index = "B",
watershed = FALSE,
show_image = FALSE)
eff <- lapply(conts, function(x){
fourier(x[[1]], nhm = 15) |> fourier_norm()
})
an <- do.call(rbind, lapply(eff, function(x){x[["A"]]}))
bn <- do.call(rbind, lapply(eff, function(x){x[["B"]]}))
cn <- do.call(rbind, lapply(eff, function(x){x[["C"]]}))
dn <- do.call(rbind, lapply(eff, function(x){x[["D"]]}))
coefs <-
cbind(an, bn, cn, dn) |>
transform(specie = c(rep(paste0("specie", 1:3), each = 3)))
library(factoextra)
library(FactoMineR)
pca <- PCA(coefs, quali.sup = 61, graph = FALSE)
fviz_pca_ind(pca, habillage = 61)
image_combine(imgs)
an
eff <- lapply(conts, function(x){
abs(fourier(x[[1]], nhm = 15) |> fourier_norm())
})
eff <- lapply(conts, function(x){
abs(fourier(x[[1]], nhm = 15) |> fourier_norm())
})
eff <- lapply(conts, function(x){
lapply(fourier(x[[1]], nhm = 15) |> fourier_norm(), abs)
})
an <- do.call(rbind, lapply(eff, function(x){x[["A"]]}))
bn <- do.call(rbind, lapply(eff, function(x){x[["B"]]}))
cn <- do.call(rbind, lapply(eff, function(x){x[["C"]]}))
dn <- do.call(rbind, lapply(eff, function(x){x[["D"]]}))
coefs <-
cbind(an, bn, cn, dn) |>
transform(specie = c(rep(paste0("specie", 1:3), each = 3)))
library(factoextra)
library(FactoMineR)
pca <- PCA(coefs, quali.sup = 61, graph = FALSE)
fviz_pca_ind(pca, habillage = 61)
eff <- lapply(conts, function(x){
fourier(x[[1]], nhm = 15) |> fourier_norm()
})
an <- do.call(rbind, lapply(eff, function(x){x[["A"]]}))
bn <- do.call(rbind, lapply(eff, function(x){x[["B"]]}))
cn <- do.call(rbind, lapply(eff, function(x){x[["C"]]}))
dn <- do.call(rbind, lapply(eff, function(x){x[["D"]]}))
coefs <-
cbind(an, bn, cn, dn) |>
transform(specie = c(rep(paste0("specie", 1:3), each = 3)))
library(factoextra)
library(FactoMineR)
pca <- PCA(coefs, quali.sup = 61, graph = FALSE)
fviz_pca_ind(pca, habillage = 61)
image_combine(imgs)
an
coefs <-
cbind(an) |>
transform(specie = c(rep(paste0("specie", 1:3), each = 3)))
coefs
pca <- PCA(coefs, quali.sup = 16, graph = FALSE)
fviz_pca_ind(pca, habillage = 16)
image_combine(imgs)
coefs <-
cbind(an, bn, cn, dn) |>
transform(specie = c(rep(paste0("specie", 1:3), each = 3)))
library(factoextra)
library(FactoMineR)
pca <- PCA(coefs, quali.sup = 61, graph = FALSE)
fviz_pca_ind(pca, habillage = 61)
image_combine(imgs)
a <- image_combine(imgs)
a
fviz_pca_ind(pca, habillage = 61)
fviz_pca_ind(pca, habillage = 61)
#| code-fold: true
#| code-summary: Show functions
# Core function for elliptical Fourier analyses
# Elliptical Fourier transform (and its normalization)
# adapted from https://momx.github.io/Momocs/reference/fourier.html
fourier <- function(x, nhm = 10, ...) {
coo <- poly_check(x) |> poly_unclose()
nr <- nrow(coo)
if (nhm * 2 > nr) {
nhm <- floor(nr/2)
if (.is_verbose()) {
message("'nhm' must be lower than half the number of points, and has been set to ", nhm, "harmonics")
}
}
if (nhm == -1) {
nhm = floor(nr/2)
if (.is_verbose()) {
message("the number of harmonics used has been set to: ", nhm)
}
}
Dx <- coo[, 1] - coo[, 1][c(nr, (1:(nr - 1)))]
Dy <- coo[, 2] - coo[, 2][c(nr, (1:(nr - 1)))]
Dt <- sqrt(Dx^2 + Dy^2)
Dt[Dt < 1e-10] <- 1e-10  # to avoid Nan
t1 <- cumsum(Dt)
t1m1 <- c(0, t1[-nr])
T <- sum(Dt)
an <- bn <- cn <- dn <- numeric(nhm)
for (i in 1:nhm) {
Ti <- (T/(2 * pi^2 * i^2))
r <- 2 * i * pi
an[i] <- Ti * sum((Dx/Dt) * (cos(r * t1/T) - cos(r * t1m1/T)))
bn[i] <- Ti * sum((Dx/Dt) * (sin(r * t1/T) - sin(r * t1m1/T)))
cn[i] <- Ti * sum((Dy/Dt) * (cos(r * t1/T) - cos(r * t1m1/T)))
dn[i] <- Ti * sum((Dy/Dt) * (sin(r * t1/T) - sin(r * t1m1/T)))
}
ao <- 2 * sum(coo[, 1] * Dt/T)
co <- 2 * sum(coo[, 2] * Dt/T)
return(list(an = an, bn = bn, cn = cn, dn = dn, ao = ao,
co = co,
nr = nr,
coords = coo))
}
# Normalized coefficients
fourier_norm <- function(ef, start = FALSE) {
A1 <- ef$an[1]
B1 <- ef$bn[1]
C1 <- ef$cn[1]
D1 <- ef$dn[1]
nhm <- length(ef$an)
theta <- 0.5 * atan(2 * (A1 * B1 + C1 * D1)/(A1^2 + C1^2 -
B1^2 - D1^2))%%pi
phaseshift <- matrix(c(cos(theta), sin(theta), -sin(theta),
cos(theta)), 2, 2)
M2 <- matrix(c(A1, C1, B1, D1), 2, 2) %*% phaseshift
v <- apply(M2^2, 2, sum)
if (v[1] < v[2]) {
theta <- theta + pi/2
}
theta <- (theta + pi/2)%%pi - pi/2
Aa <- A1 * cos(theta) + B1 * sin(theta)
Cc <- C1 * cos(theta) + D1 * sin(theta)
scale <- sqrt(Aa^2 + Cc^2)
psi <- atan(Cc/Aa)%%pi
if (Aa < 0) {
psi <- psi + pi
}
size <- 1/scale
rotation <- matrix(c(cos(psi), -sin(psi), sin(psi), cos(psi)),
2, 2)
A <- B <- C <- D <- numeric(nhm)
if (start) {
theta <- 0
}
for (i in 1:nhm) {
mat <- size * rotation %*%
matrix(c(ef$an[i], ef$cn[i],
ef$bn[i], ef$dn[i]), 2, 2) %*%
matrix(c(cos(i * theta), sin(i * theta),
-sin(i * theta), cos(i * theta)), 2, 2)
A[i] <- mat[1, 1]
B[i] <- mat[1, 2]
C[i] <- mat[2, 1]
D[i] <- mat[2, 2]
lnef <- c(A[i], B[i], C[i], D[i])
}
list(A = A, B = B, C = C, D = D, size = scale, theta = theta,
psi = psi, ao = ef$ao, co = ef$co, lnef = lnef)
}
# inverse fourier
fourier_inv <- function(ef, nhm, nb.pts = 120) {
if (is.null(ef$ao))
ef$ao <- 0
if (is.null(ef$co))
ef$co <- 0
an <- ef$an
bn <- ef$bn
cn <- ef$cn
dn <- ef$dn
ao <- ef$ao
co <- ef$co
if (missing(nhm)) {
nhm <- length(an)
}
theta <- seq(0, 2 * pi, length = nb.pts + 1)[-(nb.pts + 1)]
hx <- matrix(NA, nhm, nb.pts)
hy <- matrix(NA, nhm, nb.pts)
for (i in 1:nhm) {
hx[i, ] <- an[i] * cos(i * theta) + bn[i] * sin(i * theta)
hy[i, ] <- cn[i] * cos(i * theta) + dn[i] * sin(i * theta)
}
x <- (ao/2) + apply(hx, 2, sum)
y <- (co/2) + apply(hy, 2, sum)
coo <- cbind(x, y)
colnames(coo) <- c("x", "y")
return(coo)
}
library(pliman)
imgs <- image_import(pattern = "img", path = "fourier")
names(imgs) <- paste0("ind", 1:9)
conts <-
object_contour(imgs,
index = "B",
watershed = FALSE,
show_image = FALSE)
d <- fourier(conts$ind1$`2`, nhm = 100)
plot(imgs$img1.jpg)
library(pliman)
imgs <- image_import(pattern = "img", path = "fourier")
names(imgs) <- paste0("ind", 1:9)
conts <-
object_contour(imgs,
index = "B",
watershed = FALSE,
show_image = FALSE)
d <- fourier(conts$ind1$`2`, nhm = 100)
plot(imgs$img1.jpg)
plot(imgs$img1.jpg)
plot(imgs$ind1)
# 10 harmônicas
d_i <- fourier_inv(d, 10, nb.pts = 1000)
plot_contour(d_i, lwd = 2)
# 20 harmônicas
d_i <- fourier_inv(d, 20, nb.pts = 1000)
plot_contour(d_i, lwd = 2, col = "blue")
# 40 harmônicas
d_i <- fourier_inv(d, 80, nb.pts = 1000)
plot_contour(d_i, lwd = 2, col = "red")
setwd("E:/Desktop/UFSC/cursos/pliman_tut/imgs")
shp <- image_import("mosaic.tif", plot = TRUE)
library(pliman)
shp <- image_import("mosaic.tif", plot = TRUE)
shp <- image_import("mosaic.tif", plot = TRUE)
shp <- image_import("mosaic.tif")
ras <- raster::stack("mosaic.tif")
ras <- raster::stack("mosaic.TIF")
ras <- raster::stack("mosaic.TIFF")
ras <- raster::stack("mosaic.tiff")
getwd()
list.files(pattern = "mosaic")
ras <- raster::stack("mosaic.tif")
raster::plotRGB(ras)
