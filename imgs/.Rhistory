poly_area(shapes)
poly_perimeter(shapes)
# Chunk 18
leaves <- image_import("ref_leaves.jpg", plot = TRUE)
# getting the outline of objects
cont <- object_contour(leaves, watershed = FALSE, index = "HI")
# plotting the polygon
plot_polygon(cont)
f0 <- readImage("http://www.leg.ufpr.br/~walmes/ridiculas/micelio.JPG")
str(f0)
library(EBImage)
f0 <- readImage("http://www.leg.ufpr.br/~walmes/ridiculas/micelio.JPG")
str(f0)
plot(fO)
plot(f0)
analyze_objects(f0)
image_index(f0)
image_index(f0, index = "all")
analyze_objects(f0, index = "BI")
analyze_objects(f0, index = "R")
analyze_objects(f0, index = "R", invert = TRUE)
par(mfrow=c(3,1)) # gráfico de densidade do vermelho, verde e azul
apply(f0, MARGIN=3, function(x) plot(density(x), xlim=c(0,1)))
par(mfrow=c(3,1)) # gráfico de densidade do vermelho, verde e azul
apply(f0, MARGIN=3, function(x) plot(density(x), xlim=c(0,1)))
layout(1)
f1 <- imageData(channel(f0, mode="red")) # vermelho parece separar melhor
f1 <- 1-f1                               # inverte as tonalidades
plot(density(f1), xlim=c(0,1))
b <- 0.47
abline(v=b)
filled.contour(f1, asp=1)
display(f1) # escala cinza com claro sendo a folha
f2 <- f1
f2[f1<b] <- 1
f2[f1>=b] <- 0
display(f2) # ops! temos a borda da placa presente, removê-la!
# usado para selecionar pontos detro um círculo de certo raio
mx <- nrow(f1)/2; my <- ncol(f1)/2 # centro da imagem
# matriz de distâncias de cada pixel a partir do centro
M <- outer(1:nrow(f1), 1:ncol(f1),
function(i,j) sqrt((i-mx)^2+(j-my)^2))
str(M)
f2 <- f1
f2[f1<b] <- 1
f2[f1>=b] <- 0
f2[M>155] <- 0
display(f2) # ok! região do micélio
f3 <- f1
f3[f1<0.65] <- 1
f3[f1>=0.65] <- 0
display(f3) # região do interior da placa de petri
f2 <- bwlabel(f2)  # identifica os conjuntos brancos
f2 <- fillHull(f2) # elimina pontos pretos dentro do branco
f0 <- image_import("http://www.leg.ufpr.br/~walmes/ridiculas/micelio.JPG")
plot(f0)
back <- pick_palette(f0)
fore <- pick_palette(f0)
analyze_objects(f0,
background = back,
foreground = fore)
analyze_objects(f0,
background = back,
foreground = fore,
marker = "area")
res <-
analyze_objects(f0,
background = back,
foreground = fore)
dpi(f0)
meas <- get_measures(res, dpi = 60)
back <- pick_palette(f0)
fore <- pick_palette(f0)
res <-
analyze_objects(f0,
background = back,
foreground = fore)
meas <- get_measures(res, dpi = 60)
plot_measures(meas, measure = "caliper")
res <-
analyze_objects(f0,
background = back,
foreground = fore)
meas <- get_measures(res, dpi = 60)
plot_measures(meas, measure = "caliper")
meas
f0 <- image_import("fungo.png")
plot(f0)
back <- pi/k_palette(f0)
back <- pick_palette(f0)
f0 <- image_import("fungo.png")
plot(f0)
back <- pick_palette(f0)
fore <- pick_palette(f0)
res <-
analyze_objects(f0,
background = back,
foreground = fore)
res <-
analyze_objects(f0,
background = back,
foreground = fore,
fill_hull = TRUE)
res <-
analyze_objects(f0,
background = back,
foreground = fore,
watershed = FALSE)
meas <- get_measures(res, dpi = 60)
plot_measures(meas, measure = "diameter")
meas
dpi(f0)
meas <- get_measures(res, dpi = 56)
res <-
analyze_objects(f0,
background = back,
foreground = fore,
watershed = FALSE)
meas <- get_measures(res, dpi = 56)
plot_measures(meas, measure = "diameter")
plot_measures(meas, measure = "area")
plot_measures(meas, measure = "area", col = "black")
plot_measures(meas, measure = "area", col = "red")
plot_measures(meas, measure = "area", col = "blue")
plot_measures(meas, measure = "area",size = 2)
res <-
analyze_objects(f0,
background = back,
foreground = fore,
watershed = FALSE)
meas <- get_measures(res, dpi = 56)
plot_measures(meas, measure = "area",size = 2)
plot_measures(meas,
col = "black",
measure = "area",
size = 2)
f0 <- image_import("fungo.png", plot = TRUE)
# Chunk 1
knitr::opts_knit$set(root.dir = "E:/Desktop/tiagoolivoto/static/tutorials/pliman_ip/imgs")
# Chunk 3
library(pliman)
library(tidyverse)
library(patchwork)
img <- image_import("folhas.jpg")
# Chunk 4: import2
img_list1 <- image_import(c("img_sb_50_1.jpg", "img_sb_50_2.jpg"))
img_list2 <- image_import(pattern = "img_sb_")
str(img_list2)
# Chunk 5: display1
# Imagens individuais
plot(img)
# Chunk 6: display2
# Combine imagens
image_combine(img_list1)
# Chunk 7: manipulate1
image_dimension(img)
img_resized <- image_resize(img, rel_size = 50)
image_dimension(img_resized)
# Chunk 11
library(pliman)
img <- image_import("folhas.jpg", plot = TRUE)
img <- image_resize(img, rel_size = 30) #processamento mais rápido
# Chunk 12: segmentação2
# Calcule os índices
indexes <- image_index(img, index = c("R, G, B, NR, NG, NB"))
# Crie um gráfico raster com os valores RGB
plot(indexes)
# Crie um histograma com os valores RGB
plot(indexes, type = "density")
# Chunk 13: binary1
binary <- image_binary(img)
# Chunk 14: segmentação3
segmented <-
image_segment(img,
index = "NB", # default
fill_hull = TRUE)
# Chunk 16
library(pliman)
square <- draw_square(side = 1)
poly_area(square)
poly_perimeter(square)
# Chunk 17
leaves <- image_import("ref_leaves.jpg", plot = TRUE)
# getting the outline of objects
cont <- object_contour(leaves, watershed = FALSE, index = "HI")
# plotting the polygon
plot_polygon(cont)
# Chunk 18
cont <- cont[c("2", "4", "13", "24", "35")]
plot_polygon(cont)
count <-
analyze_objects("grains",
show_segmentation = TRUE,
show_contour = FALSE,
marker = "id")
count$statistics
# mudar de acordo com a pasta em seu computador
setwd("E:/Desktop/tiagoolivoto/static/tutorials/pliman_ip/imgs")
library(pliman)
library(tidyverse)
library(tidyverse)
library(patchwork)
img <- image_import("folhas.jpg")
img_list2 <- image_import(pattern = "img_sb_")
View(img_list2)
# Imagens individuais
plot(img)
# Combine imagens
image_combine(img_list1)
img_list1 <- image_import(c("img_sb_50_1.jpg", "img_sb_50_2.jpg"))
# Combine imagens
image_combine(img_list1)
image_dimension(img)
img_resized <- image_resize(img, rel_size = 50)
image_dimension(img_resized)
plot(img_resized)
#  this only works in an interactive section
rule <- image_import("rule.jpg", plot = TRUE)
#  this only works in an interactive section
rule <- image_import("rule.jpg", plot = TRUE)
(dpi <- dpi(rule))
rule2 <-
image_crop(rule,
width = 130:1390,
height = 582:1487,
plot = TRUE)
analyze_objects(rule2,
watershed = FALSE,
marker = "area") |>
get_measures(dpi = 518) |>
plot_measures(measure = "area", vjust = -100, size = 2)
# mudar de acordo com a pasta em seu computador
setwd("E:/Desktop/tiagoolivoto/static/tutorials/pliman_ip/imgs")
library(pliman)
img <- image_import("folhas.jpg", plot = TRUE)
img <- image_resize(img, rel_size = 30) #processamento mais rápido
# Calcule os índices
indexes <- image_index(img, index = c("R, G, B, NR, NG, NB"))
# Crie um gráfico raster com os valores RGB
plot(indexes)
# Crie um histograma com os valores RGB
plot(indexes, type = "density")
segmented <-
image_segment(img,
index = "NB", # default
fill_hull = TRUE)
library(pliman)
square <- draw_square(side = 1)
poly_area(square)
poly_perimeter(square)
leaves <- image_import("ref_leaves.jpg", plot = TRUE)
# getting the outline of objects
cont <- object_contour(leaves, watershed = FALSE, index = "HI")
# plotting the polygon
plot_polygon(cont)
cont <- cont[c("2", "4", "13", "24", "35")]
plot_polygon(cont)
measures <- poly_measures(cont) |> round_cols()
t(measures)
(color_measures <- get_measures(measures, dpi = 50))
img <- image_pliman("objects_300dpi.jpg", plot = TRUE)
img_res <- analyze_objects(img, marker = "id")
get_measures(img_res ,
id = 1,
area ~ 100)
img_res_cor <- get_measures(img_res , dpi = 300)
t(img_res_cor)
potato <- image_pliman("potato_leaves.jpg", plot = TRUE)
pot_meas <-
analyze_objects(potato,
watershed = FALSE,
marker = "id",
show_chull = TRUE) # show the convex hull
pot_meas$results
View(pot_meas)
View(pot_meas[["results"]])
View(pot_meas[["statistics"]])
count <-
analyze_objects("grains",
show_segmentation = TRUE,
show_contour = FALSE,
marker = "id")
count <-
analyze_objects("grains",
show_segmentation = TRUE,
show_contour = FALSE,
marker = "id")
View(cont)
View(count)
View(count[["statistics"]])
View(count[["results"]])
# Get the measurements of the object
measurements <- get_measures(count)
head(measurements)
analyze_objects("grains",
marker = "id",
lower_size = 719.1)
# parallel processing
# 6 multiple sections (50% of my pc's cores)
system.time(
list_res <-
analyze_objects(pattern  = "img_sb",
show_image = FALSE,
parallel = TRUE)
)
View(list_res)
View(list_res[["results"]])
img <- image_import("green.jpg", plot = TRUE)
(indx <- pliman_indexes())
soy_green <-
analyze_objects(img ,
object_index = indx [1:6], # R:NB
marker = "id",
marker_col = "black",
col_background = "white",
show_contour = FALSE)
indx [1:6]
View(soy_green)
View(soy_green[["results"]])
View(soy_green[["object_rgb"]])
View(soy_green[["object_index"]])
# PCA with the indices
ind <- summary_index(soy_green, type ="var")
get_biplot(ind$pca_res, show = "var")
get_biplot(ind$pca_res, show = "ind")
plot_measures(soy_green ,
measure = "R",
col = " black ")
plot(img)
plot_measures(soy_green ,
measure = "R",
col = " black ")
report <-
summary_index(soy_green ,
index = "R",
cut_point = 0.6,
plot = FALSE)
report <-
summary_index(soy_green ,
index = "R",
cut_point = 0.6,
plot = FALSE)
ids <- report$ids
report$between_id
report$within_id[ids,]
# ratio of pixels of each object(above and below 0.6)
barplot(t(report$within_id [,6:7]) |> as.matrix(),
legend = c("R < 0.6", "R > 0.6"))
indx
# distribution of RGB values
rgbs <-
soy_green$object_rgb |>
mutate(type = ifelse(id %in% ids, " Greenish ", " No greenish ")) |>
select(-id) |>
pivot_longer(-type)
ggplot(rgbs, aes(x = value)) +
geom_density(aes(fill = name), alpha = 0.5) +
facet_wrap(~ type)
# plot
plot(img)
plot_measures(soy_green ,
id = ids,
measure = "R",
col = "black")
cont <- object_contour(img , show_image = FALSE)
plot_contour(cont,
id = ids,
col = "red")
leaves <- image_import(image = "ref_leaves.jpg", plot = TRUE)
af <-
analyze_objects(leaves ,
watershed = FALSE,
show_contour = FALSE,
col_background = "black",
marker = "id")
af_cor <- get_measures(af, dpi = 50.5)
View(af)
View(af[["results"]])
af_cor <- get_measures(af, dpi = 50.5)
plot_measures(af_cor ,
measure = "area",
vjust = -30,
col = " red ")
img <- image_import(pattern = "ref_", plot = TRUE)
area <-
analyze_objects(img = "ref_leaves",
foreground = "ref_folha",
background = "ref_back",
reference = "ref_ref",
reference_area = 25,
marker = "area",
watershed = FALSE)
holes <- image_import("holes.jpg", plot = TRUE)
af <-
analyze_objects(holes,
watershed = FALSE,
col_background = "white",
marker = "area",
marker_col = "red",
marker_size = 3,
show_image = FALSE,
save_image = TRUE,
dir_processed = tempdir(),
contour_size = 5)
# fill the missing area
af2 <-
analyze_objects(holes,
fill_hull = TRUE, # fill ' holes '
watershed = FALSE,
col_background = "white",
marker = "area",
marker_col = "red",
marker_size = 3,
show_image = FALSE,
save_image = TRUE,
prefix = "proc2_",
dir_processed = tempdir(),
contour_size = 5)
imgs <- image_import(pattern = "proc", path = tempdir())
image_combine(imgs)
# percent of injuried area
100 - 88379 / 99189 * 100
library(pliman)
img <- image_import("exemp_1.jpeg", plot = TRUE)
h <- image_import("exem_h.png")
d <- image_import("exem_d.png")
b <- image_import("exem_b.png")
image_combine(img, h, d, b, ncol = 4)
h2 <- pick_palette(img)
sev <-
measure_disease(img = img,
img_healthy = h,
img_symptoms = d,
img_background = b)
sev$severity
sev <-
measure_disease(img = img,
img_healthy = h,
img_symptoms = d,
img_background = b,
show_original = FALSE,
col_lesions = "brown") # padrão é "black"
sev <-
measure_disease(img = img,
img_healthy = h,
img_symptoms = d,
img_background = b,
show_features = TRUE,
show_segmentation = TRUE)
View(sev)
View(sev[["severity"]])
View(sev[["shape"]])
# correct the measures (dpi = 150)
sev_corrected <- get_measures(sev, dpi = 150)
sev_corrected
system.time(
sev_lote <-
measure_disease(pattern = "soy",
img_healthy = "soja_h",
img_symptoms = "soja_s",
img_background = "soja_b",
show_image = FALSE,
save_image = TRUE,
dir_processed = temp_dir,
show_contour = FALSE,
col_lesions = "brown",
parallel = TRUE)
)
# criar um diretório temporário
temp_dir <- tempdir()
system.time(
sev_lote <-
measure_disease(pattern = "soy",
img_healthy = "soja_h",
img_symptoms = "soja_s",
img_background = "soja_b",
show_image = FALSE,
save_image = TRUE,
dir_processed = temp_dir,
show_contour = FALSE,
col_lesions = "brown",
parallel = TRUE)
)
View(sev_lote)
View(sev_lote[["severity"]])
byl <-
measure_disease_byl(pattern = "multiplas",
index = "B", # used to segment leaves from background
img_healthy = "soja_h",
img_symptoms = "soja_s",
show_contour = FALSE,
show_features = TRUE,
col_lesions = "red",
parallel = TRUE)
View(byl)
View(byl[["severity"]])
f0 <- image_import("fungo.png", plot = TRUE)
back <- pick_palette(f0)
fore <- pick_palette(f0)
res <-
analyze_objects(f0,
background = back,
foreground = fore,
watershed = FALSE)
dpi(f0)
dpi(f0)
meas <- get_measures(res, dpi = 81)
plot_measures(meas,
col = "black",
measure = "area",
size = 2)
View(meas)
